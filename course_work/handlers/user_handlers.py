from aiogram import  Router, Bot, F
from aiogram.filters import Command, StateFilter
from aiogram.types import ( CallbackQuery, InlineKeyboardButton,
                            InlineKeyboardMarkup, Message)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage, Redis
from config_data.config import load_config
import lexiconn.lexicon_ru
from keyboards.set_menu import set_main_menu
from keyboards.user_keyboards import create_inline_kb
import use_database.using_database
import use_database.client_information
import use_database.teacher_information
import sqlite3

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router = Router()
config = load_config()

bot = Bot(token=config.tg_bot.token)

redis = Redis(host='localhost')

storage = RedisStorage(redis=redis)

user_dict: dict[int, dict[str, str | int | bool]] = {}

class FSMFillForm(StatesGroup):
    client_login = State()
    cl_name = State()
    cl_surname  = State()
    cl_course  = State()
    cl_phone  = State()
    cl_mail  = State()
    cl_university  = State()
    cl_faculty  = State()
    teacher_login  = State()
    th_name  = State()
    th_surname  = State()
    th_course  = State()
    th_phone  = State()
    th_mail  = State()
    th_university  = State()
    th_faculty  = State()

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@router.message(Command(commands=["start"]),  StateFilter(default_state))
async def process_start_command(message: Message):
    keyboard = create_inline_kb(2, 'but_1', 'but_2')
    date = message.date
    await bot.send_photo(message.chat.id, lexiconn.lexicon_ru.photo_url, caption = lexiconn.lexicon_ru.lexicon_start + str(date), reply_markup=keyboard)
    await set_main_menu(bot)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
@router.message(Command(commands=['help']))
async def process_help_command(message: Message):
    await message.answer( 'üí©üí©üí©')

@router.message(Command(commands=['contact']))
async def process_contact_command(message: Message):
    user_id = message.from_user.id
    await message.answer(f'–í–∞—à ID: {user_id}')

@router.message(Command(commands=['exit']))
async def process_exit_command(message: Message,  state: FSMContext):
    await state.set_state(default_state)

@router.callback_query(F.data == 'but_1',  StateFilter(default_state))
async def process_button_client_press(callback: CallbackQuery,  state: FSMContext):
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    user_id = callback.from_user.id
    result = use_database.using_database.check_clients_authorization(str(user_id))
    keyboard = create_inline_kb(1, 'but_5','but_6','but_7','but_8')
    if (result):
        await bot.send_photo(callback.message.chat.id, lexiconn.lexicon_ru.client_photo_url, caption = lexiconn.lexicon_ru.cl_login_text(use_database.client_information.clients_name(str(user_id))), reply_markup=keyboard)
        await state.set_state(FSMFillForm.client_login)

    else:
        await bot.send_message(callback.message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à–µ –ò–º—è')
        await state.set_state(FSMFillForm.cl_name)
        use_database.using_database.new_client(user_id,callback.from_user.username)

#–í–≤–æ–¥–∏–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
@router.message(StateFilter(FSMFillForm.cl_name))
async def fill_client_name(message: Message, state: FSMContext):
    use_database.using_database.fill_clients_name(message.from_user.id, message.text)
    await bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é:')
    await state.set_state(FSMFillForm.cl_surname)

#–í–≤–æ–¥–∏–º —Ñ–∞–º–∏–ª–∏—é –∫–ª–∏–µ–Ω—Ç–∞
@router.message(StateFilter(FSMFillForm.cl_surname))
async def fill_client_surname(message: Message, state: FSMContext):
    use_database.using_database.fill_clients_surname(message.from_user.id, message.text)
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å –≤ —É–Ω–∏–∫–µ:')
    await state.set_state(FSMFillForm.cl_course)

#–í–≤–æ–¥–∏–º –∫—É—Ä—Å –∫–ª–∏–µ–Ω—Ç–∞
@router.message(StateFilter(FSMFillForm.cl_course))
async def fill_client_course(message: Message, state: FSMContext):
    use_database.using_database.fill_clients_course(message.from_user.id, message.text)
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
    await state.set_state(FSMFillForm.cl_phone)

#–í–≤–æ–¥–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
@router.message(StateFilter(FSMFillForm.cl_phone))
async def fill_client_phone(message: Message, state: FSMContext):
    use_database.using_database.fill_clients_phone(message.from_user.id, message.text)
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É:')
    await state.set_state(FSMFillForm.cl_mail)

#–í–≤–æ–¥–∏–º –ø–æ—á—Ç—É –∫–ª–∏–µ–Ω—Ç–∞
@router.message(StateFilter(FSMFillForm.cl_mail))
async def fill_client_mail(message: Message, state: FSMContext):
    use_database.using_database.fill_clients_mail(message.from_user.id, message.text)
    keyboard = create_inline_kb(1, 'but_3')
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:', reply_markup= keyboard)
    await state.set_state(FSMFillForm.cl_university)

#–í—ã–±–∏—Ä–∞–µ–º –í–£–ó –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
@router.callback_query(F.data == 'but_3',  StateFilter(FSMFillForm.cl_university))
async def fill_client_university(callback: CallbackQuery,  state: FSMContext):
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    use_database.using_database.fill_clients_university(callback.from_user.id, callback.data)
    keyboard = create_inline_kb(1, 'but_4')
    await bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', reply_markup= keyboard)
    await state.set_state(FSMFillForm.cl_faculty)


#–í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
@router.callback_query(F.data == 'but_4',  StateFilter(FSMFillForm.cl_faculty))
async def fill_client_faculty(callback: CallbackQuery,  state: FSMContext):
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    keyboard = create_inline_kb(1, 'but_cl_menu')
    use_database.using_database.fill_clients_faculty(callback.from_user.id, callback.data)
    await bot.send_message(callback.message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n      –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', reply_markup= keyboard)
    await state.set_state(FSMFillForm.client_login)


#–í—Ö–æ–¥ —É—á–∏—Ç–µ–ª—è
@router.callback_query(F.data == 'but_2',  StateFilter(default_state))
async def process_button_teacher_press(callback: CallbackQuery,  state: FSMContext):
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    user_id = callback.from_user.id
    result = use_database.using_database.check_teachers_authorization(str(user_id))
    keyboard = create_inline_kb(1, 'but_5', 'but_18','but_8')
    if (result):
        await bot.send_photo(callback.message.chat.id, lexiconn.lexicon_ru.teacher_photo_url, caption = lexiconn.lexicon_ru.th_login_text(use_database.teacher_information.teacher_name(str(user_id))), reply_markup= keyboard)
        await state.set_state(FSMFillForm.teacher_login)

    else:
        await bot.send_message(callback.message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à–µ –ò–º—è')
        await state.set_state(FSMFillForm.th_name)
        use_database.using_database.new_teacher(user_id,callback.from_user.username)



#–í–≤–æ–¥–∏–º –∏–º—è —É—á–∏—Ç–µ–ª—è
@router.message(StateFilter(FSMFillForm.th_name))
async def fill_teacher_name(message: Message, state: FSMContext):
    use_database.using_database.fill_teachers_name(message.from_user.id, message.text)
    await bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é:')
    await state.set_state(FSMFillForm.th_surname)

#–í–≤–æ–¥–∏–º —Ñ–∞–º–∏–ª–∏—é —É—á–∏—Ç–µ–ª—è
@router.message(StateFilter(FSMFillForm.th_surname))
async def fill_teacher_surname(message: Message, state: FSMContext):
    use_database.using_database.fill_teachers_surname(message.from_user.id, message.text)
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å –≤ —É–Ω–∏–∫–µ:')
    await state.set_state(FSMFillForm.th_course)

#–í–≤–æ–¥–∏–º –∫—É—Ä—Å —É—á–∏—Ç–µ–ª—è
@router.message(StateFilter(FSMFillForm.th_course))
async def fill_teacher_course(message: Message, state: FSMContext):
    use_database.using_database.fill_teachers_course(message.from_user.id, message.text)
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
    await state.set_state(FSMFillForm.th_phone)

#–í–≤–æ–¥–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω —É—á–∏—Ç–µ–ª—è
@router.message(StateFilter(FSMFillForm.th_phone))
async def fill_teacher_phone(message: Message, state: FSMContext):
    use_database.using_database.fill_teachers_phone(message.from_user.id, message.text)
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É:')
    await state.set_state(FSMFillForm.th_mail)

#–í–≤–æ–¥–∏–º –ø–æ—á—Ç—É —É—á–∏—Ç–µ–ª—è
@router.message(StateFilter(FSMFillForm.th_mail))
async def fill_teacher_mail(message: Message, state: FSMContext):
    use_database.using_database.fill_teachers_mail(message.from_user.id, message.text)
    keyboard = create_inline_kb(1, 'but_3')
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:', reply_markup= keyboard)
    await state.set_state(FSMFillForm.th_university)

#–í—ã–±–∏—Ä–∞–µ–º –í–£–ó –¥–ª—è —É—á–∏—Ç–µ–ª—è
@router.callback_query(F.data == 'but_3',  StateFilter(FSMFillForm.th_university))
async def fill_teacher_university(callback: CallbackQuery,  state: FSMContext):
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    use_database.using_database.fill_teachers_university(callback.from_user.id, callback.data)
    keyboard = create_inline_kb(1, 'but_4')
    await bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', reply_markup= keyboard)
    await state.set_state(FSMFillForm.th_faculty)


#–í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –¥–ª—è —É—á–∏—Ç–µ–ª—è
@router.callback_query(F.data == 'but_4',  StateFilter(FSMFillForm.th_faculty))
async def fill_teacher_faculty(callback: CallbackQuery,  state: FSMContext):
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    keyboard = create_inline_kb(1, 'but_th_menu')
    use_database.using_database.fill_teachers_faculty(callback.from_user.id, callback.data)
    await bot.send_message(callback.message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n      –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', reply_markup= keyboard)
    await state.set_state(FSMFillForm.teacher_login)
